/* @flow */

export type Action<T> = {
  type: string,
  payload: T
}

export type ActionCreator<Input, Payload = Input> = Input => Action<Payload>

export type Reducer<State> = {
  (State, Action<*>): State,
  get: () => Reducer<State>,
  case<Input, Payload>(
    ActionCreator<Input, Payload> | string,
    (State, Payload) => State
  ): Reducer<State>,
  catch<Input, Payload>(
    ActionCreator<Input, Payload>,
    (State, Error) => State
  ): Reducer<State>,
  else((State, Action<*>) => State): Reducer<State>
}

declare module.exports: {
  buildActionCreator: (
    ?{ prefix?: string }
  ) => {
    createAction<Input, Payload>(
      t?: string | void,
      fn?: (Input) => Payload
    ): ActionCreator<Input, Payload>,
    createPromiseAction<Input, Payload>(
      t?: string | void,
      fn: (Input) => Promise<Payload>
    ): ActionCreator<Input, Payload>
  },
  createReducer: <T>(T) => Reducer<T>
}
