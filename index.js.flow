/* @flow */

type Action<T> = {
  type: string,
  payload: T
}

type ActionCreator<Input, Payload> = Input => Action<Payload>

type Reducer<State> = {
  (State, Action<any>): State,
  get: () => Reducer<State>,
  case<Input, Payload>(
    ActionCreator<Input, Payload>,
    (State, Payload) => State
  ): Reducer<State>
}

declare module.exports: {
  buildActionCreator: ({ prefix?: string }) => {
    createAction<Input, Payload>(
      t: string,
      fn: (Input) => Payload
    ): ActionCreator<Input, Payload>,
    createSimpleAction(t: string): ActionCreator<void, void>,
    createPromiseAction<Input, Payload>(
      t: string,
      fn: (Input) => Promise<Payload>
    ): ActionCreator<Input, Payload>
  },
  createReducer: <T>(T) => Reducer<T>
}
